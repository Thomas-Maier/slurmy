#!/usr/bin/env python3

import argparse
import logging
from slurmy import JobHandler
from slurmy.tools import options as _ops

_log = logging.getLogger('slurmy')

## TODO: encapsulate utility in helper funcitions that just take jobhandler/job instances (instead of putting everything into the classes)
## TODO: allow for passing a config file, which holds the full jobs conifguration
## TODO: convenient way to add short session keys? One entry in bookeeping file which maps long session keys to short ones. get_bookkeeping() should return the keys and sessions dict separately.

def _get_prompt():
  try:
    from IPython import embed
    return embed
  except ImportError:
    ## Fallback if ipython not available
    import code
    shell = code.InteractiveConsole(globals())
    return shell.interact

def list_sessions():
  bk_keys, bk_sessions = _ops.Main.get_bookkeeping()
  if bk_sessions is None:
    log.error('No bookeeping found')
    return
  for key, path in bk_keys.items():
    name = bk_sessions[path]['name']
    timestamp = bk_sessions[path]['timestamp']
    description = bk_sessions[path]['description']
    print_string = ('{}:\n  path: {}\n  timestamp: {}'.format(key, path, timestamp))
    if description: print_string += '\n  description: {}'.format(description)
    print (print_string)

def load(key):
  bk_keys, bk_sessions = _ops.Main.get_bookkeeping()
  if bk_sessions is None:
    log.error('No bookeeping found')
    return None
  session = bk_sessions[bk_keys[key]]
  name = session['name']
  work_dir = session['work_dir']
  jh = JobHandler(name = name, work_dir = work_dir, use_snapshot = True)

  return jh

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Slurmy interactive')
  # parser.add_argument('jobhandler', metavar='JOBHANDLER', type=str, nargs=1, help='')
  parser.add_argument('-p', '--path', metavar='PATH', dest='path', type=str, default = None, help='Path to existing session')
  parser.add_argument("--debug", dest="debug", action="store_true", default=False, help="Debug mode")
  args = parser.parse_args()
  if args.debug: _log.setLevel(level=logging.DEBUG)
  _jh_name = args.path
  if _jh_name:
    _jh_path = ''
    if '/' in _jh_name:
      _jh_path = jh_name.rsplit('/', 1)[0]
      _jh_name = jh_name.rsplit('/', 1)[-1]

    jh = JobHandler(name = _jh_name, work_dir = _jh_path, use_snapshot = True)
  prompt = _get_prompt()
  prompt()
